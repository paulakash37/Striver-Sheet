/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) 
    {
        // step-1
       // make copy of each node
      // and link them together side-by-side in a single list.
        Node* iter=head;
        Node* front=head;
        while(iter!=NULL)
        {
            front=iter->next;
            Node* copy=new Node(iter->val);
            iter->next=copy;
            copy->next=front;
            iter=front;
        }
        // step-2
        //assign random pointers for the copy nodes
        iter=head;
        while(iter!=NULL)
        {
            if(iter->random!=NULL)
            {
                iter->next->random=iter->random->next;
            }
            iter=iter->next->next;
        }
        //step - 3
        // restore the original list and extract the copy list
        iter=head;
        Node* pseudohead=new Node(0);
        Node* copy=pseudohead;
        while(iter!=NULL)
        {
            front=iter->next->next;
            
            // extract the copy
            copy->next=iter->next;
            
             // restore the original list
            iter->next=front;
            
            copy=copy->next;
            iter=front;
        }
        return pseudohead->next;
    }
};
