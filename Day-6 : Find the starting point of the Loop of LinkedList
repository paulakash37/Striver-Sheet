/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution 
{
public:
    ListNode *detectCycle(ListNode *head) 
    {
        //Base Case
        if(!head || !head->next)
            return NULL;
        ListNode* fast=head;
        ListNode* slow=head;
        ListNode* entry=head;
        while(fast->next && fast->next->next)
        {
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast) //there is a cycle
            {
            while(slow!=entry) //found the entry cycle
            {
                entry=entry->next;
                slow=slow->next;  
            }
            return entry;
        
    }
    }
        return NULL;
    }
};
